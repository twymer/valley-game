 /* 
   Four-weight-per-vertex hardware skinning, 2 lights 
   The trouble with vertex programs is they're not general purpose, but 
   fixed function hardware skinning is very poorly supported 
 */ 
 void hardwareSkinningFourWeightsFullHANIM_vp( 
    float4 position : POSITION, 
    float3 normal   : NORMAL, 
    float2 uv       : TEXCOORD0, 
    float4 blendIdx : BLENDINDICES, 
    float4 blendWgt : BLENDWEIGHT, 
     
 
    out float4 oPosition : POSITION, 
    out float2 oUv       : TEXCOORD0, 
    out float4 colour           : COLOR, 
    // Support up to 78 bones of float3x4 
    uniform float3x4   worldMatrix3x4Array[78], 
    uniform float4x4 viewProjectionMatrix, 
    uniform float3   lightPos[2], 
    uniform float4   lightDiffuseColour[2], 
    uniform float4   ambient) 
 { 
    // transform by indexed matrix 
    float4 blendPos = float4(0,0,0,0); 
    int i; 
    for (i = 0; i < 4; ++i) 
    { 
       blendPos += float4(mul(worldMatrix3x4Array[blendIdx[i]], position).xyz, 1.0) * blendWgt[i]; 
    } 
    // view / projection 
    oPosition = mul(viewProjectionMatrix, blendPos); 
    // transform normal 
    float3 norm = float3(0,0,0); 
    for (i = 0; i < 4; ++i) 
    { 
       norm += mul((float3x3)worldMatrix3x4Array[blendIdx[i]], normal) * 
       blendWgt[i]; 
    } 
    norm = normalize(norm); 
    float3 lightDir0 = normalize(lightPos[0] - blendPos); 
    float3 lightDir1 = normalize(lightPos[1] - blendPos); 
 
     
    oUv = uv; 
    colour = ambient + 
       (saturate(dot(lightDir0, norm)) * lightDiffuseColour[0]) + 
       (saturate(dot(lightDir1, norm)) * lightDiffuseColour[1]); 
        
    oUv = uv; 
 
     
 }  