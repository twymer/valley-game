/* Bump mapping with Parallax offset vertex program
   In this program, we want to calculate the tangent space light end eye vectors
   which will get passed to the fragment program to produce the per-pixel bump map
   with parallax offset effect.
*/


float fogExp (float z, float density) {
	return 1 - clamp (pow (2.71828, -z * density), 0, 1);
}


/* Vertex program that moves light and eye vectors into texture tangent space at vertex */

void main_vp(	float4 position	: POSITION,
				float3 normal	: NORMAL,
				float2 uv		: TEXCOORD0,
				float3 tangent	: TANGENT0,
				// outputs
				out float4 oPosition	: POSITION,
				out float2 oUv			: TEXCOORD0,
				out float4 oLightDir0	: TEXCOORD1, // tangent space, .w stores attenuation
				out float3 oEyeDir		: TEXCOORD2, // tangent space
				out float3 oHalfAngle0	: TEXCOORD3, //
				out float4 oLightDir1	: TEXCOORD4,
				out float3 oHalfAngle1	: TEXCOORD5,
				out float4 oLightDir2	: TEXCOORD6,
				out float3 oHalfAngle2	: TEXCOORD7,
				out float oFog			: FOG,
				// parameters
				uniform float4 lightPosition[3], // object space
				uniform float4 lightAttenuation[3],
				uniform float3 eyePosition,   // object space
				uniform float4x4 worldViewProj,
				uniform float4x4 world,
				uniform float4 iFogParams)
{
	// calculate output position
	oPosition = mul(worldViewProj, position);

	// pass the main uvs straight through unchanged
	oUv = uv;

	// calculate tangent space light vector
	// Get object space light direction
	float3 lightDir0 = lightPosition[0].xyz - (position.xyz * lightPosition[0].w);
	float3 lightDir1 = lightPosition[1].xyz - (position.xyz * lightPosition[1].w);
	float3 lightDir2 = lightPosition[2].xyz - (position.xyz * lightPosition[2].w);

	float3 eyeDir = eyePosition - position.xyz;

	// Find model scale. We assume that it is scaled uniformly in all directions
	float scale = length(mul(world, float4(1, 0, 0, 0)).xyz);

	float dist0 = length(lightDir0) * scale;
	float dist1 = length(lightDir1) * scale;
	float dist2 = length(lightDir2) * scale;

	float attenuation0 = lightPosition[0].w == 1 ? 1.0 / (lightAttenuation[0].y + lightAttenuation[0].z * dist0 + lightAttenuation[0].w * dist0 * dist0) : 1;
	float attenuation1 = lightPosition[1].w == 1 ? 1.0 / (lightAttenuation[1].y + lightAttenuation[1].z * dist1 + lightAttenuation[1].w * dist1 * dist1) : 1;
	float attenuation2 = lightPosition[2].w == 1 ? 1.0 / (lightAttenuation[2].y + lightAttenuation[2].z * dist2 + lightAttenuation[2].w * dist2 * dist2) : 1;

	// Calculate the binormal (NB we assume both normal and tangent are
	// already normalised)
	// NB looks like nvidia cross params are BACKWARDS to what you'd expect
	// this equates to NxT, not TxN
	float3 binormal = cross(tangent, normal);

	// Form a rotation matrix out of the vectors
	float3x3 rotation = float3x3(tangent, binormal, normal);

	// Transform the light vector according to this matrix
	lightDir0 = normalize(mul(rotation, lightDir0));
	lightDir1 = normalize(mul(rotation, lightDir1));
	lightDir2 = normalize(mul(rotation, lightDir2));
	eyeDir = normalize(mul(rotation, eyeDir));

	oEyeDir = eyeDir;

	oLightDir0 = float4(lightDir0, attenuation0);
	oLightDir1 = float4(lightDir1, attenuation1);
	oLightDir2 = float4(lightDir2, attenuation2);

	oHalfAngle0 = normalize(eyeDir + lightDir0);
	oHalfAngle1 = normalize(eyeDir + lightDir1);
	oHalfAngle2 = normalize(eyeDir + lightDir2);

	oFog = fogExp(oPosition.z, iFogParams.x);

	//oFog = 1 - ((iFogParams.z - oPosition.z)/(iFogParams.z - iFogParams.y));
}

// General functions

// Expand a range-compressed vector
float3 expand(float3 v)
{
	return (v - 0.5) * 2;
}


void main_fp(float2 uv : TEXCOORD0,
	float4 lightDir0 : TEXCOORD1,
	float3 eyeDir : TEXCOORD2,
	float3 halfAngle0 : TEXCOORD3,
	float4 lightDir1 : TEXCOORD4,
	float3 halfAngle1 : TEXCOORD5,
	float4 lightDir2 : TEXCOORD6,
	float3 halfAngle2 : TEXCOORD7,
	float iFog : FOG,
	uniform float3 lightDiffuse[3],
	uniform float3 lightSpecular[3],
	uniform float3 lightAmbient,
	uniform float4 scaleBias,
	uniform sampler2D normalHeightMap: TEXUNIT0,
	uniform sampler2D diffuseMap: TEXUNIT1,
	uniform sampler2D specularMap: TEXUNIT2,
	uniform float3 iFogColour,
	out float4 oColour : COLOR)
{
 	if (iFog < 1) {

		// get the height using the tex coords
		float height = tex2D(normalHeightMap, uv).a;

		// scale and bias factors
		float scale = scaleBias.x;
		float bias = scaleBias.y;

		// calculate displacement
		float displacement = (height * scale) + bias;

		float3 uv2 = float3(uv, 1);

		// calculate the new tex coord to use for normal and diffuse
		float2 newTexCoord = ((eyeDir * displacement) + uv2).xy;

		// get the new normal and diffuse values
		float3 normal = expand(tex2D(normalHeightMap, newTexCoord).xyz);
		float3 diffuse = tex2D(diffuseMap, newTexCoord).xyz;

		float3 specular = (pow(saturate(dot(normal, halfAngle0)), 32) * lightSpecular[0] +
						   pow(saturate(dot(normal, halfAngle1)), 32) * lightSpecular[1] +
						   pow(saturate(dot(normal, halfAngle2)), 32) * lightSpecular[2]) * tex2D(specularMap, newTexCoord).x;
		float3 col = diffuse * (lightDir0.w * saturate(dot(normal, lightDir0.xyz)) * lightDiffuse[0] +
								lightDir1.w * saturate(dot(normal, lightDir1.xyz)) * lightDiffuse[1] +
								lightDir2.w * saturate(dot(normal, lightDir2.xyz)) * lightDiffuse[2] +
								lightAmbient) + specular;

		col = lerp(col, iFogColour, iFog);
		oColour = float4(col, tex2D(diffuseMap, newTexCoord).w);
	} else {
		oColour = float4(iFogColour, tex2D(diffuseMap, uv).w);
	}

}


void mainsplat_fp(float2 uv : TEXCOORD0,
	float3 lightDir : TEXCOORD1,
	float3 eyeDir : TEXCOORD2,
	float3 halfAngle : TEXCOORD3,
	uniform float3 lightAmbient,
	uniform float tile,
	uniform float3 lightDiffuse,
	uniform float3 lightSpecular,
	uniform float4 scaleBias,
	uniform sampler2D splatMap,
	uniform sampler2D normalHeightMap,
	uniform sampler2D diffuseMap,
	out float4 oColour : COLOR)

{
	float splat = tex2D(splatMap, uv).w;
	if (splat != 0.0) {
		// get the height using the tex coords
		float height = tex2D(normalHeightMap, uv).a;

		// scale and bias factors
		float scale = scaleBias.x;
		float bias = scaleBias.y;

		// calculate displacement
		float displacement = (height * scale) + bias;

		float3 uv2 = float3(uv, 1) * tile;

		// calculate the new tex coord to use for normal and diffuse
		float2 newTexCoord = ((eyeDir * displacement) + uv2).xy;

		// get the new normal and diffuse values
		float3 normal = expand(tex2D(normalHeightMap, newTexCoord ).xyz);
		float3 diffuse = tex2D(diffuseMap, newTexCoord).xyz;

//		float3 specular = pow(saturate(dot(normal, halfAngle)), 32) * lightSpecular;
//		float3 col = diffuse * saturate(dot(normal, lightDir)) * lightDiffuse + specular;
		float3 col = diffuse * saturate(dot(normal, lightDir)) * lightDiffuse * lightAmbient;

		oColour = float4(col, 1);
		oColour.w = splat;
	}
}

